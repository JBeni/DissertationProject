{
  "contractName": "ProjectManager",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/others/ProjectManager.sol\":\"ProjectManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/others/ProjectManager.sol\":{\"keccak256\":\"0x230caf65b7132fd550cefd3bee1b143a35179680d2b4c534896f9de305444805\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://14b8c2c39fec6cd5680471c31c4857f3bca99a301ce18d3c69f2f5b1abfd4766\",\"dweb:/ipfs/QmXjF8i3DWd9qEb5zwTNBZo9aVrCnTEYtx8sKFtXjyGx8s\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220d2857d612e5b721e8ae37cce2b19ae9ab9e542a8e1475488f4a78bb607f1175e64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600080fdfea2646970667358221220d2857d612e5b721e8ae37cce2b19ae9ab9e542a8e1475488f4a78bb607f1175e64736f6c63430008090033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "70:4019:4:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "70:4019:4:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\ncontract ProjectManager {\r\n\r\n    // address projectInitiator;\r\n\r\n    // mapping(uint => S_Project) public projects;\r\n    // mapping(uint => S_Request) public companyRequests;\r\n    // mapping(uint => S_Request) public supervisorRequests;\r\n\r\n    // uint indexProject;\r\n    // uint indexCompanyRequest;\r\n    // uint indexSupervisorRequest;\r\n\r\n    // struct S_Project {\r\n    //     uint index;\r\n    //     bytes32 identifier;\r\n    // }\r\n\r\n    // struct S_Request {\r\n    //     uint index;\r\n    //     string description;\r\n    //     RequestStatus status;\r\n    //     S_Project project;\r\n    //     address subjectAddress;\r\n    // }\r\n\r\n    // enum RequestStatus { Unverified, Verified }\r\n    // enum RequestType { OnGoing, Done }\r\n\r\n    // event CreateProject(uint _indexProject, Project.ProjectStatus _projectStatus, address _address);\r\n    // event UpdateCompanyRequestStatus(uint _indexRequest, RequestStatus _status, S_Project _project, ProjectStatus _projectStatus, address _subjectAddress);\r\n    // event UpdateSupervisorRequestStatus(uint _indexRequest, RequestStatus _status, Project _project, ProjectStatus _projectStatus, address _subjectAddress);\r\n\r\n    // constructor() {\r\n    //     projectInitiator = msg.sender;\r\n    // }\r\n\r\n    // modifier onlyProjectInitiator {\r\n    //     require(userInfo[projectInitiator]._role == Roles.ProjectInitiator, \"You don't have the rights for this resources.\");\r\n    //     require(projectInitiator == msg.sender, \"You are not a project initiator\");\r\n    //     _;\r\n    // }\r\n\r\n    // // modifier projectStatusApproved {\r\n    // //     require( == ProjectStatus.Approved, \"The project is nit approved, the operation cannot be done.\")\r\n    // //     _;\r\n    // // }\r\n\r\n    // function createProject(string memory _description, ProjectStatus _status, string memory _hashStringValue) public onlyProjectInitiator {\r\n    //     Project project = new Project(indexProject, _description, _status);\r\n    //     bytes32 _identifier = createUniqueIdentifier(_hashStringValue, address(project));\r\n\r\n    //     projects[indexProject].project = project;\r\n    //     projects[indexProject].identifier = _identifier;\r\n    //     emit CreateProject(indexProject, ProjectStatus.Created, address(project));\r\n    //     indexProject++;\r\n    // }\r\n\r\n    // function createUniqueIdentifier(string memory _text, address _addr) public pure returns (bytes32)  {\r\n    //     return keccak256(abi.encodePacked(_text, _addr));\r\n    // }\r\n\r\n    // function requestProjectApprovalFromSupervisor(string memory _description, Project _project, address _subjectAddress) public onlyProjectInitiator {\r\n    //     require(ProjectStatus(projects[0].project.projectStatus) == ProjectStatus.Created, \"The project is not created, the operation cannot be done.\");\r\n\r\n    //     S_Request storage request = supervisorRequests[indexSupervisorRequest];\r\n    //     request._description = _description;\r\n    //     request._status = RequestStatus.Unverified;\r\n    //     request._project = _project;\r\n    //     request._subjectAddress = _subjectAddress;\r\n\r\n    //     emit UpdateSupervisorRequestStatus(indexSupervisorRequest, RequestStatus.Unverified, _project, _project._projectStatus, _subjectAddress);\r\n    //     indexSupervisorRequest++;\r\n    // }\r\n\r\n    // function requestStartProjectToCompanyBuilder(string memory _description, Project _project, address _subjectAddress) public onlyProjectInitiator {\r\n    //     require(_project._projectStatus == ProjectStatus.Approved, \"The project is not approved, the operation cannot be done.\");\r\n\r\n    //     S_Request storage request = companyRequests[indexCompanyRequest];\r\n    //     request._description = _description;\r\n    //     request._status = RequestStatus.Unverified;\r\n    //     request._project = _project;\r\n    //     request._subjectAddress = _subjectAddress;\r\n\r\n    //     emit UpdateCompanyRequestStatus(indexCompanyRequest, RequestStatus.Unverified, _project, _project._projectStatus, _subjectAddress);\r\n    //     indexCompanyRequest++;\r\n    // }\r\n\r\n}\r\n",
  "sourcePath": "/mnt/c/users/beniamin/source/repos/dissertationproject/contracts/others/ProjectManager.sol",
  "ast": {
    "absolutePath": "project:/contracts/others/ProjectManager.sol",
    "exportedSymbols": {
      "ProjectManager": [
        565
      ]
    },
    "id": 566,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 564,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:4"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ProjectManager",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 565,
        "linearizedBaseContracts": [
          565
        ],
        "name": "ProjectManager",
        "nameLocation": "79:14:4",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 566,
        "src": "70:4019:4",
        "usedErrors": []
      }
    ],
    "src": "33:4058:4"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/others/ProjectManager.sol",
    "exportedSymbols": {
      "ProjectManager": [
        565
      ]
    },
    "id": 566,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 564,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:4"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ProjectManager",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 565,
        "linearizedBaseContracts": [
          565
        ],
        "name": "ProjectManager",
        "nameLocation": "79:14:4",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 566,
        "src": "70:4019:4",
        "usedErrors": []
      }
    ],
    "src": "33:4058:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.9+commit.e5eed63a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-10-25T07:18:18.848Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}